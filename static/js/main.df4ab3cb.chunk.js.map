{"version":3,"sources":["logo.svg","Components/Header.js","Components/Statedata.js","Components/India.js","Components/World.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","to","Component","Statedata","state","stateData","axios","get","then","response","setState","data","console","log","keys","Object","this","Accordion","defaultActiveKey","map","itm","ky","districts","districtData","total_active","total_confirmed","total_deaths","total_recover","district_list","x","active","confirmed","deceased","recovered","ob","push","Card","as","Button","eventKey","Body","district_name","India","src","style","width","Title","cases","Text","todayCases","deaths","World","country","marginLeft","countryInfo","flag","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.df4ab3cb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{Component} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {Navbar,Nav} from 'react-bootstrap';\r\n\r\nclass Header extends Component{\r\n\r\n    render(){\r\n        return(\r\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n  <Navbar.Brand href=\"#home\">COVID-19</Navbar.Brand>\r\n  <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n  <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n    <Nav className=\"mr-auto\">\r\n      <Link className=\"nav-link\" to=\"/india\">India</Link>\r\n      <Link className=\"nav-link\" to=\"/world\">World</Link>\r\n       </Nav>\r\n   </Navbar.Collapse>\r\n</Navbar>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Header;","import React,{Component} from 'react';\r\nimport axios from 'axios';\r\nimport {Accordion, Card,Button } from 'react-bootstrap';\r\nclass Statedata extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n\r\n            stateData : ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n    axios.get(\"https://api.covid19india.org/state_district_wise.json\").then(response=>{\r\n        this.setState({stateData:response.data})\r\n        console.log(response.data);\r\n    });\r\n    }\r\n    render(){\r\n\r\n        let keys = Object.keys(this.state.stateData);\r\n\r\n        return(\r\n\r\n            <div className=\"row\">\r\n               <div className=\"col-md-12\">\r\n               <Accordion defaultActiveKey=\"0\">\r\n                   {\r\n                       keys.map((itm,ky)=>{\r\n                           let districts = this.state.stateData[itm].districtData;\r\n                           let distric_keys = Object.keys(districts);\r\n                           let total_active = 0;\r\n                           let total_confirmed = 0;\r\n                           let total_deaths = 0;\r\n                           let total_recover = 0;\r\n                           let district_list = [];\r\n                           for (let x in districts){\r\n                            total_active +=districts[x].active;\r\n                            total_confirmed += districts[x].confirmed;\r\n                            total_deaths +=  districts[x].deceased;\r\n                            total_recover += districts[x].recovered;\r\n                            let ob = districts[x];\r\n                            ob[\"district_name\"] = x;\r\n                            district_list.push(ob)\r\n                           }\r\n\r\n                           console.log(district_list);\r\n                           return(\r\n                            <Card>\r\n                            <Card.Header>\r\n                              <Accordion.Toggle as={Button} variant=\"primary\" eventKey={ky}>\r\n                                {itm} - <span className=\"btn-dark p-1 mr-2\">Total Cases  - {total_confirmed}</span> <span className=\"btn-dark p-1 mr-2\">Active - {total_active} </span><span className=\"btn-dark p-1 mr-2\">Recovered- {total_recover}</span> <span className=\"btn-dark p-1 mr-2\">Death - {total_deaths}</span>\r\n                              </Accordion.Toggle>\r\n                            </Card.Header>\r\n                            <Accordion.Collapse eventKey={ky}>\r\n                              <Card.Body>\r\n                                  <table className=\"table table-boardered table-striped\">\r\n                                      <thead>\r\n                                          <td>District</td>\r\n                                          <td>Confirmed cases</td>\r\n                                          <td>Active</td>\r\n                                          <td>Recovered</td>\r\n                                          <td>Deaths</td>\r\n                                      </thead>\r\n                                      <tbody>\r\n                                       {\r\n                                           district_list.map((itm,ky)=>{\r\n\r\n                                            return (\r\n                                               <tr>\r\n                                                   <td>{itm.district_name}</td>\r\n                                                   <td>{itm.confirmed}</td>\r\n                                                    <td>{itm.active}</td>\r\n                                                    <td>{itm.recovered}</td>\r\n                                                    <td>{itm.deceased}</td>\r\n                                               </tr>)\r\n                                           })\r\n                                       }\r\n                                      </tbody>\r\n                                  </table>\r\n                              </Card.Body>\r\n                            </Accordion.Collapse>\r\n                          </Card>\r\n                               \r\n                           )\r\n                       })\r\n                   }\r\n                \r\n \r\n </Accordion>\r\n\r\n               </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Statedata;","import React,{Component} from 'react';\r\nimport {Card} from 'react-bootstrap';\r\nimport Statedata from './Statedata';\r\nimport axios from 'axios'\r\n \r\nclass India extends Component{\r\n\r\n  constructor(){\r\n    super();\r\n    this.state ={\r\n      data : {}\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    axios.get(\"https://corona.lmao.ninja/v2/countries/india\").then(response=>{\r\n      this.setState({data:response.data});\r\n    });\r\n  }\r\n\r\n    render(){\r\n\r\n        return(\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                <img src=\"https://www.countryflags.io/IN/shiny/64.png\" />\r\n                <h3>India</h3>\r\n                <div className=\"col-md5-12\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-3\">\r\n                        <Card className=\"badge badge-primary\" style={{ width: '18rem' }}>\r\n  <Card.Body className=\"text-center\">\r\n    <Card.Title>Total Cases</Card.Title>\r\n    <h3>{this.state.data.cases}</h3>\r\n    <Card.Text>\r\n    [Today: {this.state.todayCases}]\r\n    </Card.Text>\r\n  </Card.Body>\r\n</Card>\r\n\r\n                        </div>\r\n                        <div className=\"col-md-3\">\r\n                        <Card className=\"badge badge-warning\" style={{ width: '18rem' }}>\r\n  <Card.Body className=\"text-center\">\r\n    <Card.Title>ACTIVE CASES</Card.Title>\r\n    <h3>{this.state.data.active}</h3>\r\n    <Card.Text>\r\n\r\n    </Card.Text>\r\n  </Card.Body>\r\n</Card>\r\n\r\n                        </div>\r\n                        <div className=\"col-md-3\">\r\n                        <Card className=\"badge badge-success\" style={{ width: '18rem' }}>\r\n  <Card.Body className=\"text-center\">\r\n    <Card.Title>RECOVERY</Card.Title>\r\n    <h3>{this.state.data.recovered}</h3>\r\n    <Card.Text>\r\n    </Card.Text>\r\n  </Card.Body>\r\n</Card>\r\n\r\n                        </div>\r\n                        <div className=\"col-md-3\">\r\n                        <Card className=\"badge badge-danger\" style={{ width: '18rem' }}>\r\n  <Card.Body className=\"text-center\">\r\n    <Card.Title>DETAHS</Card.Title>\r\n    <h3>{this.state.data.deaths}</h3>\r\n    <Card.Text>\r\n    </Card.Text>\r\n  </Card.Body>\r\n</Card>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n                </div>\r\n                <div className=\"col-md-12\">\r\n                <Statedata />\r\n            </div>\r\n               \r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default India;","import React,{Component} from 'react';\r\nimport axios from 'axios';\r\n\r\nclass World extends Component{\r\n\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            data : []\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        axios.get(\"https://corona.lmao.ninja/v2/countries\").then(response=>{\r\n            this.setState({data:response.data});\r\n        });\r\n\r\n    }\r\n\r\n    render(){\r\n\r\n        return(\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n\r\n                    <table className=\"table table-boardered table-primary table-striped\">\r\n                        <thead>\r\n                            <tr>\r\n                                <td>Country</td>\r\n                                <td>Total Cases</td>\r\n                                <td>Recovered</td>\r\n                                <td>Deaths</td>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                this.state.data.map((itm,ky)=>{\r\n                                    return(\r\n                                        <tr>\r\n                                            <td>{itm.country}\r\n                                            <img style={{width:'64px',marginLeft:'10px'}}src={itm.countryInfo.flag}/>\r\n                                            </td>\r\n                                            <td>{itm.cases}</td>\r\n                                            <td>{itm.recovered}</td>\r\n                                            <td>{itm.deaths}</td>\r\n                                        </tr>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default World;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Button} from 'react-bootstrap';\n\nimport Header from './Components/Header';\nimport India from './Components/India';\nimport World from './Components/World';\n\nimport {\n  BrowserRouter as Router,\n  Link,\n  Switch,\n  Route\n} from 'react-router-dom';\n\n\nclass App extends Component{\n\n  constructor(){\n    super();\n  }\n\n  render(){\n\n    return(\n      <div className=\"container-fluid\">\n\n        <Router>\n          <Header />\n\n        <Switch>\n        <Route exact path=\"/\">\n          <India />\n        </Route>\n        <Route exact path=\"/india\">\n          <India />\n       </Route>\n       <Route exact path=\"/world\">\n          <World />\n       </Route>\n        </Switch>\n        </Router>\n\n      </div>\n\n    )\n\n    \n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}